apply from: 'gradle/scripts/helpers.gradle'

repositories {
    // Other repositories described by default:
    // CleanroomMC: https://maven.cleanroommc.com
    exclusiveContent {
        forRepository {
            maven {
                name 'CurseMaven'
                url 'https://cursemaven.com'
            }
        }
        filter {
            includeGroup 'curse.maven'
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name 'Modrinth'
                url 'https://api.modrinth.com/maven'
            }
        }
        filter {
            includeGroup 'maven.modrinth'
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    implementation 'com.cleanroommc:configanytime:3.0'
    runtimeOnly 'com.cleanroommc:strip-latest-forge-requirements:1.0'
    compileOnly 'org.jetbrains:annotations:24.0.0'

    implementation rfg.deobf('curse.maven:had-enough-items-557549:4543375')

    // Mod Integrations
    def modMap = [:]
    def customModMap = [:]
    def loadMap = [:]

    modMap.put(["actually-additions-228404:3117927"], project.actuallyadditions)
    modMap.put(["agricraft-225635:3317747", "infinitylib-251396:3317119"], project.agricraft)
    modMap.put(["astral-sorcery-241721:3044416", "baubles-227083:2518667"], project.astralsorcery)
    modMap.put(["attained-drops-2-254294:2538349", "placebo-283644:4629597"], project.attaineddrops)
    modMap.put(["bewitchment-legacy-285439:3256343", "baubles-227083:2518667", "patchouli-306770:3162874"], project.bewitchment)
    modMap.put(["blood-magic-224791:2822288", "guide-api-228832:2645992"], project.bloodmagic)
    modMap.put(["botania-225643:3330934", "baubles-227083:2518667"], project.botania)
    modMap.put(["cooking-for-blockheads-231484:2862651"], project.cookingforblockheads)
    modMap.put(["cyclic-239286:4075832"], project.cyclic)
    modMap.put(["embers-rekindled-300777:3695248"], project.embers)
    modMap.put(["engineers-decor-313866:3783239", "immersive-engineering-231951:2974106"], project.engineersdecor)
    modMap.put(["future-mc-310059:5013081", "shadowfacts-forgelin-248453:2785465"], project.futuremc)
    modMap.put(["item-stages-280316:2696766", "game-stages-268655:2951840", "bookshelf-228525:2836960"], project.itemstages)
    modMap.put(["llibrary-243298:3116493"], project.llibary)
    modMap.put(["pams-harvestcraft-221857:2904825"], project.harvestcraft)
    modMap.put(["immersive-engineering-231951:2974106"], project.immersiveengineering)
    modMap.put(["industrial-craft-242638:3078604"], project.industrialcraft)
    modMap.put(["industrial-foregoing-266515:2745321", "tesla-core-lib-254602:3438487", "shadowfacts-forgelin-248453:2785465"], project.industrialforegoing)
    modMap.put(["mystical-agriculture-246640:2704562", "cucumber-272335:2645867"], project.mysticalagriculture)
    modMap.put(["mystical-world-282940:3460961", "mysticallib-277064:3483816", "patchouli-306770:3162874"], project.mysticalworld)
    modMap.put(["natures-aura-306626:2882138", "patchouli-306770:3162874"], project.naturesaura)
    modMap.put(["new-crimson-revelations-1025633:6167339", "thaumcraft-223628:2629023", "baubles-227083:2518667", "thaumcraftfix-1069346:6405744"], project.newcrimsonrevelations)
    modMap.put(["oreberries-275408:2578045"], project.oreberries)
    modMap.put(["ore-stages-290201:2632997", "game-stages-268655:2951840", "bookshelf-228525:2836960"], project.orestages)
    modMap.put(["quality-tools-264756:2732994", "potion-core-242872:2905184"], project.qualitytools)
    modMap.put(["quark-rotn-edition-417392:5594720", "autoreglib-250363:2746011"], project.quark)
    modMap.put(["rats-ratn-edition-439001:3711122"], project.rats)
    modMap.put(["redstone-paste-67508:2477676"], project.redstonepaste)
    modMap.put(["roots-246183:5193525", "mystical-world-282940:3460961", "mysticallib-277064:3483816", "patchouli-306770:3162874"], project.roots)
    modMap.put(["rustic-256141:3107974"], project.rustic)
    modMap.put(["spartan-weaponry-278141:5564836"], project.spartanweaponry)
    modMap.put(["simpledifficulty-360779:3613814"], project.simpledifficulty)
    modMap.put(["tinkers-construct-74072:2902483", "mantle-74924:2713386"], project.tinkersconstruct)
    modMap.put(["tinkers-complement-272671:2843439", "tinkers-construct-74072:2902483", "mantle-74924:2713386"], project.tinkerscomplement)
    modMap.put(["thaumcraft-223628:2629023", "baubles-227083:2518667"], project.thaumcraft)
    modMap.put(["thaumic-additions-232564:3663195", "hammer-lib-247401:5259462"], project.thaumicadditions)
    modMap.put(["the-one-probe-245211:2667280"], project.theoneprobe)
    modMap.put(["tough-as-nails-246391:2639903"], project.toughasnails)
    modMap.put(["the-twilight-forest-227639:3051450"], project.twilightforest)

    customModMap.put(["com.animania:animania-1.12.2-base:2.0.3.28", "curse.maven:animania-farm-407632:3213139"], project.animania)

    compileOnly rfg.deobf("curse.maven:ender-io-64578:4674244")
    compileOnly rfg.deobf("curse.maven:endercore-231868:4671384")

    modMap.each{mods, load -> {
        boolean loadFlag = load.toBoolean()
        mods.each{mod ->
            def modMaven = "curse.maven:" + mod
            if(!loadMap.containsKey(modMaven)) {
                loadMap.put(modMaven,loadFlag)
            } else {
                if(loadFlag && !loadMap[modMaven]) {
                    loadMap[modMaven] = loadFlag
                }
            }
        }
    }}

    customModMap.each{mods, load -> {
        boolean loadFlag = load.toBoolean()
        mods.each{mod ->
            if(!loadMap.containsValue(mod)) {
                loadMap.put(mod,loadFlag)
            } else {
                if(loadFlag && !loadMap[mod]) {
                    loadFlag[mod] = loadFlag
                }
            }
        }
    }}

    loadMap.each{maven,load -> {
        if(load) {
            implementation(rfg.deobf(maven))
        } else {
            compileOnly(rfg.deobf(maven))
        }
    }}

    // Example - Dependency descriptor:
    // 'com.google.code.gson:gson:2.8.6' << group: com.google.code.gson, name:gson, version:2.8.6
    // 'group:name:version:classifier' where classifier is optional

    // Example - Deobfuscating dependencies:
    // rfg.deobf('curse.maven:had-enough-items-557549:4543375')
    // By wrapping a dependency descriptor in rfg.deobf() method call, the dependency is queued for deobfuscation
    // When deobfuscating, RFG respects the mapping_channel + mapping_version stated in gradle.properties

    // Example - CurseMaven dependencies:
    // 'curse.maven:had-enough-items-557549:4543375' << had-enough-items = project slug, 557549 = project id, 4543375 = file id
    // Full documentation: https://cursemaven.com/

    // Example - Modrinth dependencies:
    // 'maven.modrinth:jei:4.16.1.1000' << jei = project name, 4.16.1.1000 = file version
    // Full documentation: https://docs.modrinth.com/docs/tutorials/maven/

    // Common dependency types (configuration):
    // implementation = dependency available at both compile time and runtime
    // runtimeOnly = runtime dependency
    // compileOnly = compile time dependency
    // annotationProcessor = annotation processing dependencies

    // Transitive dependencies:
    // (Dependencies that your dependency depends on)
    // If you wish to exclude transitive dependencies in the described dependencies
    // Use a closure as such:
    // implementation ('com.google.code.gson:gson:2.8.6') {
    //     transitive = false
    // }
}